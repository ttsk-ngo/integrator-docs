"use strict";(self.webpackChunkswdr_5_docs=self.webpackChunkswdr_5_docs||[]).push([[2137],{7937:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Requirements/FunctionalRequirements/General/G-FR0001","title":"G-FR0001 - Login","description":"Integrator supports OIDC login as the only login option available for ordinary users. Administators are provided with additional login panel for logging into local accounts.","source":"@site/docs/Requirements/03-FunctionalRequirements/01-General/G-FR0001.mdx","sourceDirName":"Requirements/03-FunctionalRequirements/01-General","slug":"/Requirements/FunctionalRequirements/General/G-FR0001","permalink":"/integrator-docs/docs/Requirements/FunctionalRequirements/General/G-FR0001","draft":false,"unlisted":false,"editUrl":"https://github.com/ttsk-ngo/integrator-docs/tree/main/docs/Requirements/03-FunctionalRequirements/01-General/G-FR0001.mdx","tags":[],"version":"current","frontMatter":{"sidebar_label":"G-FR0001 - Login"},"sidebar":"requirementsSidebar","previous":{"title":"Functional requirements","permalink":"/integrator-docs/docs/Requirements/FunctionalRequirements/"},"next":{"title":"G-FR0002 - Configuration file","permalink":"/integrator-docs/docs/Requirements/FunctionalRequirements/General/G-FR0002"}}');var r=t(4848),o=t(8453);const s={sidebar_label:"G-FR0001 - Login"},a="G-FR0001 - Login",l={},c=[{value:"OIDC login",id:"oidc-login",level:2},{value:"Syncing user data",id:"syncing-user-data",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"g-fr0001---login",children:"G-FR0001 - Login"})}),"\n",(0,r.jsx)(n.p,{children:"Integrator supports OIDC login as the only login option available for ordinary users. Administators are provided with additional login panel for logging into local accounts."}),"\n",(0,r.jsx)(n.h2,{id:"oidc-login",children:"OIDC login"}),"\n",(0,r.jsxs)(n.p,{children:["Integrator acts as OIDC client app consuming ",(0,r.jsx)(n.em,{children:"authorization code flow"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"syncing-user-data",children:"Syncing user data"}),"\n",(0,r.jsxs)(n.p,{children:["After each login, Integrator fetches user's data and syncs it with its own resources. Changes made on the IdP side are treated as a priority. Mapping IdP user claims to Integrator's own data records is possible to set in application's settings file. Integrator identifies its users only by ",(0,r.jsx)(n.code,{children:"sub"})," claim."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);